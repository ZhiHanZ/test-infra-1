apiVersion: apps/v1
kind: Deployment
metadata:
  name: "{{ .Values.current.name }}"
spec:
  replicas: 1
  selector:
    matchLabels:
      app: {{ .Values.current.name }}
  template:
    metadata:
      {{- with .Values.podAnnotations }}
      annotations:
      {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        app: {{ .Values.current.name }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
      {{- toYaml . | nindent 8 }}
      {{- end }}
      volumes:
      - name: varlog
        emptyDir: {}
      containers:
        - name: {{ .Chart.Name }}
          command:
            - sh
            - "-c"
            - |
              /bin/bash <<'EOF'
              echo "Start benchmarking on {{ .Values.current.name }}}"
              /fuse-store &> /var/log/{{.Values.current.name}}-fuse-store.log &
              P1=$!
              /fuse-query &> /var/log/{{.Values.current.name}}-fuse-query.log &
              P2=$!
              tail -n+1 -f /var/log/{{.Values.current.name}}-fuse-store.log &
              P3=$!
              tail -n+1 -f /var/log/{{.Values.current.name}}-fuse-query.log &
              P4=$!
              wait $P1 $P2 $P3 $P4
              EOF
          securityContext:
          {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.current.repository }}:{{ .Values.current.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.current.pullPolicy }}
          envFrom:
            - configMapRef:
                name: default
          volumeMounts:
          - name: varlog
            mountPath: /var/log
          ports:
            - name: mysql
              containerPort: {{ .Values.configs.mysqlPort }}
              protocol: TCP
            - name: clickhouse
              containerPort: {{ .Values.configs.clickhousePort }}
              protocol: TCP
            - name: http
              containerPort: {{ .Values.configs.httpAPIPort }}
              protocol: TCP
            - name: metric
              containerPort: {{ .Values.configs.metricAPIPort }}
              protocol: TCP
            - name: rpc
              containerPort: {{ .Values.configs.rpcAPIPort }}
              protocol: TCP
          # want to see query log only and close log triggered by kubeproxy
          # livenessProbe:
          #   httpGet:
          #     path: /v1/hello
          #     port: http
          # readinessProbe:
          #  httpGet:
          #    path: /v1/configs
          #    port: http
          resources:
      {{- toYaml .Values.resources | nindent 12 }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
      {{- toYaml . | nindent 8 }}
      {{- end }}
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
              - matchExpressions:
                  - key: test-branch
                    operator: In
                    values:
                      - current
      {{- with .Values.tolerations }}
      tolerations:
      {{- toYaml . | nindent 8 }}

  {{- end }}
